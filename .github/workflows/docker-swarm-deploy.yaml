name: Build, Push Docker Image to GHCR & Deploy on Docker Swarm

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/initd-itservices/probuild-backend:${{ github.sha }}

      # - name: Deploy to Docker Swarm
      #   uses: appleboy/ssh-action@v0.1.1
      #   with:
      #     host: ${{ secrets.SWARM_MANAGER_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     password: ${{ secrets.SSH_PASSWORD }}
      #     script: |
      #       # Login to GitHub Container Registry
      #       echo "***" | docker login ghcr.io -u Prince-initd --password-stdin
      #       docker pull ghcr.io/initd-itservices/probuild-backend:${{ github.sha }}

      #       # Deployment variables
      #       SERVICE_NAME="probuild-backend"
      #       IMAGE="ghcr.io/initd-itservices/probuild-backend:${{ github.sha }}"
      #       REPLICAS=1
      #       PORT_MAPPING="5000:8080"
      #       FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
      #       DB_CONNECTION_STRING="${{ secrets.DB_CONNECTION_STRING }}"
      #       AWS_S3_BUCKET_NAME="${{ secrets.AWS_S3_BUCKET_NAME }}"
      #       AWS_REGION="${{ secrets.AWS_REGION }}"
      #       AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
      #       AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      #       AWS_S3_ENDPOINT="${{ secrets.AWS_S3_ENDPOINT }}"

      #       # Check if the service already exists
      #       if [ $(docker service ls --filter name=$SERVICE_NAME -q | wc -l) -eq 0 ]; then
      #           # Create the service if it doesn't exist
      #           docker service create \
      #             --name $SERVICE_NAME \
      #             --replicas $REPLICAS \
      #             --publish $PORT_MAPPING \
      #             --env DB_CONNECTION_STRING="$DB_CONNECTION_STRING" \
      #             --env FRONTEND_URL="$FRONTEND_URL" \
      #             --env AWS_S3_BUCKET_NAME="$AWS_S3_BUCKET_NAME" \
      #             --env AWS_REGION="$AWS_REGION" \
      #             --env AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
      #             --env AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
      #             --env AWS_S3_ENDPOINT="$AWS_S3_ENDPOINT" \
      #             $IMAGE
      #       else
      #           # Update the existing service
      #           docker service update \
      #             --image $IMAGE \
      #             --replicas $REPLICAS \
      #             --env-add DB_CONNECTION_STRING="$DB_CONNECTION_STRING" \
      #             --env-add FRONTEND_URL="$FRONTEND_URL" \
      #             --env-add AWS_S3_BUCKET_NAME="$AWS_S3_BUCKET_NAME" \
      #             --env-add AWS_REGION="$AWS_REGION" \
      #             --env-add AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
      #             --env-add AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
      #             --env-add AWS_S3_ENDPOINT="$AWS_S3_ENDPOINT" \
      #             --publish-add $PORT_MAPPING \
      #             $SERVICE_NAME
      #       fi
