name: Build and Deploy to Azure Container Apps

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Check out code
        uses: actions/checkout@v4

      # Debug: Print the Service Principal credentials and secrets (for debugging purposes)
      - name: Debug Service Principal credentials and secrets
        run: |
          echo "AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}"
          echo "AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}"
          echo "AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}"
          echo "SQL_USER: ${{ secrets.SQL_USER }}"
          echo "SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}"
          echo "AZURE_BLOB_KEY: ${{ secrets.AZURE_BLOB_KEY }}"
          echo "JWT_KEY: ${{ secrets.JWT_KEY }}"
          echo "DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}"

      # Log in to Azure using Service Principal
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}","subscriptionId":"0e6dc202-bcae-4b8b-b1de-a8f3a04341d6"}'

      # Log in to Azure Container Registry
      - name: Log in to ACR
        run: |
          az acr login --name probuild

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push Docker image to ACR
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: probuild.azurecr.io/probuildai-backend:${{ github.sha }}

      # Deploy to Azure Container Apps using the pre-built image
      - name: Deploy to Azure Container Apps
        run: |
          # Check if the app already exists
          if az containerapp show --name probuildai-backend --resource-group rg-Probuild > /dev/null 2>&1; then
            echo "Container app exists, updating..."
            az containerapp update \
              --name probuildai-backend \
              --resource-group rg-Probuild \
              --image probuild.azurecr.io/probuildai-backend:${{ github.sha }} \
              --set-env-vars \
                "SQL_USER=${{ secrets.SQL_USER }}" \
                "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" \
                "AZURE_BLOB_KEY=${{ secrets.AZURE_BLOB_KEY }}" \
                "JWT_KEY=${{ secrets.JWT_KEY }}" \
                "ASPNETCORE_URLS=http://+:8080" \
                "ELASTIC_ENABLED=false" \
                "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}"
          else
            echo "Container app does not exist, creating..."
            az containerapp create \
              --name probuildai-backend \
              --resource-group rg-Probuild \
              --environment managedEnvironment-rgProbuild-ae27 \
              --image probuild.azurecr.io/probuildai-backend:${{ github.sha }} \
              --cpu 0.5 \
              --memory 1Gi \
              --min-replicas 1 \
              --max-replicas 1 \
              --ingress external \
              --target-port 8080 \
              --set-env-vars \
                "SQL_USER=${{ secrets.SQL_USER }}" \
                "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" \
                "AZURE_BLOB_KEY=${{ secrets.AZURE_BLOB_KEY }}" \
                "JWT_KEY=${{ secrets.JWT_KEY }}" \
                "ASPNETCORE_URLS=http://+:8080" \
                "ELASTIC_ENABLED=false" \
                "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}"
          fi

      # Check logs to diagnose degraded state
      - name: Check Container AppREW Logs
        run: |
          az containerapp logs show --name probuildai-backend --resource-group rg-Probuild --follow
        continue-on-error: true